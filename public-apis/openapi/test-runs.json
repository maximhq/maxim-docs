{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "contact": {
      "name": "Maxim Engineering",
      "email": "eng@getmaxim.ai"
    },
    "title": "Maxim SDK API - test-runs",
    "description": "API documentation for Maxim SDK test-runs endpoints"
  },
  "servers": [
    {
      "url": "https://api.getmaxim.ai"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-maxim-api-key",
        "description": "API key for authentication"
      }
    },
    "schemas": {},
    "parameters": {}
  },
  "paths": {
    "/v1/test-runs": {
      "get": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get test runs for a workspace",
        "summary": "Get test runs",
        "tags": [
          "Test run"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Unique identifier for the workspace"
            },
            "required": true,
            "name": "workspaceId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Test run ID to fetch specific run"
            },
            "required": false,
            "name": "id",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "nullable": true,
              "description": "Cursor for pagination"
            },
            "required": false,
            "name": "cursor",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Whether this is a run report"
            },
            "required": false,
            "name": "isRunReport",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "maximum": 100,
              "default": 20,
              "description": "Maximum number of records to return (max: 100)"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "operator": {
                    "type": "string"
                  },
                  "value": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      {
                        "nullable": true
                      }
                    ]
                  },
                  "combinator": {
                    "type": "string",
                    "enum": [
                      "and",
                      "or"
                    ],
                    "default": "and"
                  }
                },
                "required": [
                  "name",
                  "operator"
                ]
              },
              "description": "Additional filters for the query"
            },
            "required": false,
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved test runs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "runs": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "total": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete test runs from a workspace",
        "summary": "Delete test runs",
        "tags": [
          "Test run"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "workspaceId": {
                    "type": "string",
                    "description": "Unique identifier for the workspace"
                  },
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "description": "Array of test run IDs to delete example: [\"run_123\", \"run_456\"]"
                  }
                },
                "required": [
                  "workspaceId",
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully deleted test runs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  }
}